#!/usr/bin/env perl

use strict;
use warnings;
use utf8;
use version;

sub debug
{
    print STDERR join(" ", @_)
        if $ENV{G_DEBUG};
}

sub which(@)
{
    for(@_)
    {
        my $bin = `which $_ 2>/dev/null`;
        chomp $bin;
        return $bin if $bin;
    }
    return undef;
}

sub shell_quote(@)
{
    my @rv;
    for(@_)
    {
        s/'/'\\''/g;
        push @rv, "'$_'";
    }
    return join ' ', @rv;
}

sub do_or_die(@)
{
    exec(@_) or die "Failed to run $_[0]: $!\n";
}

sub separate_process(@)
{
    # `perldoc perlipc` warns that fork()ing inherits all the file
    # descriptors of the parent. Normally that can be troublesome
    # but that's actually what we want in this case for supporting
    # things like `vless`.
    # (Though I can't get that to work with xterm)
    defined(my $pid = fork()) or die "Failed to fork: $!\n";
    exit if $pid; # if it's non-zero then we're the parent
    do_or_die(@_);
}

### Main program

my $basename = `basename $0`; chomp $basename;
my $gvim = $ENV{GVIM} || which(qw(neovide nvim-qt gvim));
my $vim = $ENV{VISUAL} || which(qw(nvim vim vi));
my @vim_args;
my @vim_tail;
my $remote;
my $geometry = '80x50';

if($basename eq 'gro')
{
    push @vim_args, '+set ro', '+set noswapfile';
}
# This breaks some stuff, stick to vless
#if(! -t STDIN)
elsif($basename eq 'vless')
{
    # Currently only works for gvim or direct vim, not for
    # xterm/tmux/screen
    push @vim_args, '+set buftype=nofile';
    push @vim_tail, '--not-a-term' if $vim =~ m(/vim$);
    push @vim_tail, '-';
}
elsif($basename eq 'g')
{
    $remote++;
}

if($ENV{DISPLAY})
{
    if($gvim && -x $gvim)
    {
        if($remote)
        {
            unshift @vim_args, '--remote-silent' if $gvim =~ m(/gvim$);
        }
        if($gvim =~ m(/neovide$))
        {
            unshift @vim_args, '--notabs', '--geometry', $geometry);
            push @vim_args, '--';
        }
        debug("running gvim: ", $gvim, @vim_args, @ARGV, @vim_tail);
        do_or_die($gvim, @vim_args, @ARGV, @vim_tail);
    }
}

unless($vim && -x $vim)
{
    die "VISUAL not set or not executable!\n";
}

if($ENV{DISPLAY})   # X but no gvim
{
    my $term = which('term');
    if($term)
    {
        my $fh;
        open($fh, "-|", $term, "--which");
        my $dummy = $fh->getline();
        if(close($fh))
        {
            separate_process($term, '-e', $vim, @vim_args, @ARGV, @vim_tail);
        }
    }
}
if($ENV{TMUX})      # tmux
{
    # tmux â‰¥ 2.1 does what you'd expect.
    my $tmux_version = `tmux -V`;
    chomp $tmux_version;
    $tmux_version =~ s/^tmux\s*//;
    $tmux_version =~ s/[^\d.]*$//;
    $tmux_version = version->parse($tmux_version);
    if($tmux_version >= version->parse("2.1"))
    {
        do_or_die( qw(tmux new-window), $vim, @vim_args, @ARGV, @vim_tail );
    }

    # Older versions of tmux are dumb and expect a single shell command
    do_or_die( qw(tmux new_window), shell_quote($vim, @vim_args, @ARGV, @vim_tail) );
}
elsif($ENV{STY})    # GNU screen
{
    do_or_die( qw(screen -t g), $vim, @vim_args, @ARGV, @vim_tail );
}
else                # Fall back on just running vim directly
{
    do_or_die($vim, @vim_args, @ARGV, @vim_tail);
}
