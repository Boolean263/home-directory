#!/bin/false
# vim:set filetype=sh

export SRCPATH="$HOME/git/wireshark"
export BUILDPATH="$SRCPATH/build"
#export BUILDPATH="/tmp/daperry/wireshark"
export WS_BIN_PATH="$BUILDPATH/run"
#export WIRESHARK_LOG_LEVEL=Info

export CC="/usr/bin/clang-15"
export CXX="/usr/bin/clang++-15"

mkdir -p "$WS_BIN_PATH"
ln -snf "$BUILDPATH/compile_commands.json"

add_to_path PATH "$WS_BIN_PATH"
alias ws="$WS_BIN_PATH/wireshark -o gui.start_title:$(git branch --show-current)"
alias ts="$WS_BIN_PATH/tshark"
alias wsdb="gdb $WS_BIN_PATH/wireshark"

reset_build(){
    rm -rf "$BUILDPATH"
}

cm(){
    mkdir -p "$BUILDPATH"
    pushd "$BUILDPATH"
    cmake -G Ninja -DCMAKE_EXPORT_COMPILE_COMMANDS=1 ${1+"$@"} "$SRCPATH"
    popd
}

m(){
    [ -d "$BUILDPATH" ] || cm
    cmake --build "$BUILDPATH" ${1:+"$@"}
}

wstest(){
    local WIRESHARK_LOG_LEVEL=
    local WIRESHARK_LOG_DOMAINS=
    local WS_TEST_DIR=/tmp/wstest.$(date +%Y%m%d%H%M%S)

    cmake --build "$BUILDPATH" --target test-programs || return
    mkdir -p "$XDG_CONFIG_HOME/wireshark"
    pushd $XDG_CONFIG_HOME
    python3 -m pytest "$SRCPATH" ${1:+"$@"}
    rv=$?
    if [ $rv -gt 0 ] ; then
        python3 -m pytest "$SRCPATH" --lf --log-cli-level=info
    fi
    find . -size 0 -delete
    popd
    return $rv
}

# Suggested on https://gitlab.com/wireshark/wireshark/-/wikis/Development/Tips
lx(){
    libtool --mode=execute $*
}
