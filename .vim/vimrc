" vim:set fileencoding=utf-8:

if filereadable(expand("~/.exrc"))
    " Get my simple prefs from .exrc.
    source ~/.exrc
    " But undo the mappings there so they don't interfere with the ones
    " I set below
    unmap 
    unmap! 
else
    " Simple vi prefs
    set autoindent
    set shiftwidth=4
    set ruler
    set showmode
endif

" The next line fails in Windows
silent! language en_US.UTF-8
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,latin1
autocmd BufEnter * if &fileencoding == "" && &modifiable == 1 | set fileencoding=utf-8 nomodified | endif

let mapleader=" "

" PLUGINS {{{1
" Configuration {{{2
let g:tagbar_type_diff = {
    \'ctagstype':'diff',
    \'kinds': [ 'f:filename' ],
    \'sort':0
\}
let g:tagbar_type_make = {
    \'kinds':[
        \ 'm:macros',
        \ 't:targets'
    \]
\}

let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'

let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_aggregate_errors = 1
let g:syntastic_enable_signs = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_enable_perl_checker = 1
let g:syntastic_c_checkers = ['clang_tidy', 'gcc']
let g:syntastic_python_checkers = ['python3', 'pycodestyle']
let g:syntastic_perl_checkers = ['perl', 'podchecker']
let g:syntastic_xml_checkers = ['xmllint']
let g:syntastic_sh_checkers = ['sh']
let g:syntastic_lua_checkers = ["luac"]
let g:syntastic_error_symbol = "\u2717"
let g:syntastic_warning_symbol = "\u26A0"
let g:syntastic_c_config_file = "c.syntastic"
let g:syntastic_json_checkers = ["jsonlint"]

let g:clever_f_across_no_line = 1       " disable multi-line search
let g:clever_f_fix_key_direction = 1    " f/t always forwards, F/T always back

let g:TerminusCursorShape = 0 " Don't change cursor shape (plays funny w/tmux)

let g:SimpylFold_fold_import = 0
let g:SimpylFold_fold_docstring = 0

let skeletons#autoRegister = 1

let g:EditorConfig_max_line_indicator = 'line'

let g:rustfmt_autosave = 1

let g:bufExplorerDisableDefaultKeyMapping = 1
let g:bufExplorerShowUnlisted = 1
let g:bufExplorerSortBy = 'fullpath'

let g:netrw_sort_sequence='[\/]$,*'
set suffixes-=.h            " vim-vinegar uses this setting

let g:ale_sign_column_always = 1
let g:ale_sign_error = "\u2717"
let g:ale_sign_warning = "\u26A0"
let g:ale_completion_enabled = 1
let g:ale_hover_cursor = 0
let g:ale_hover_to_preview = 1
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_on_text_changed = "normal"
let g:ale_completion_delay = 500
let g:ale_lint_delay = 1000

nnoremap <F8> :TagbarToggle<CR>

nmap ]h <Plug>(GitGutterNextHunk)
nmap [h <Plug>(GitGutterPrevHunk)

" for wellle/targets.vim
" "change in argument" but don't eat all the whitespace
nmap cia cIa

" for inkarkat/vim-mark
let g:mwDefaultHighlightingPalette = 'extended'

nmap <Leader>m <Plug>MarkSet
nmap <Leader>r <Plug>MarkRegex
nmap <Leader>M <Plug>MarkConfirmAllClear
nmap ]m <Plug>MarkSearchAnyNext
nmap [m <Plug>MarkSearchAnyPrev
nmap <Plug>IgnoreMarkSearchNext <Plug>MarkSearchNext
nmap <Plug>IgnoreMarkSearchPrev <Plug>MarkSearchPrev

" for vim-pencil
let g:pencil#conceallevel = 0


" }}}2

let $VIMHOME=expand('<sfile>:p:h')
" vim-plug (https://github.com/junegunn/vim-plug) settings
" Automatically install vim-plug and run PlugInstall if vim-plug not found
if empty(glob('$VIMHOME/autoload/plug.vim')) && &shell =~ 'sh$'
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

silent! call plug#begin('$VIMHOME/bundle') " {{{2
" use silent! to suppress warning messages about missing git in Windows
Plug 'tpope/vim-vinegar'        " Improvements to netrw, which press '-' to see
Plug 'tpope/vim-characterize'   " type `ga` to show the unicode codepoint
Plug 'tpope/vim-fugitive'       " Git wrapper
Plug 'tpope/vim-repeat'         " Repeat supported plugin actions with `.`
Plug 'tpope/vim-unimpaired'     " Bracket mappings such as `[a` `]a` for args…
Plug 'Boolean263/vim-surround', { 'branch':'289-use-matchpairs' }  " cs([ - change () to [] (my fork)
Plug 'tpope/vim-commentary'     " Comment stuff out with `gc…`
Plug 'tpope/vim-apathy'         " make `gf` etc. less C-specific
"Plug 'tpope/vim-endwise'        " auto-add `endif` etc. when appropriate
Plug 'justinmk/vim-sneak'       " Use `sxy` to jump to next occurrence of xy
Plug 'tpope/vim-eunuch'         " UNIX shell commands, make '#!' files +x
Plug 'wellle/targets.vim'       " Text objects, eg. `di'` delete inside quote
Plug 'chaoren/vim-wordmotion'   " Let `w`/`e` motion recognize underscores, camelcase, etc.
Plug 'preservim/tagbar'         " tags sidebar, lets me show tag in statusline
Plug 'wincent/terminus'         " improve terminal vim (incl. bracketed paste)
Plug 'airblade/vim-gitgutter'   " git changes in gutter, also `c` text object
Plug 'inkarkat/vim-ingo-library' " Prereq for next plugin
Plug 'inkarkat/vim-mark'        " Mark words with <leader>m
"Plug 'morhetz/gruvbox'          " Fancy theme
"Plug 'Lokaltog/vim-monotone'    " Monotone colorscheme
Plug 'andreypopp/vim-colors-plain' " Very plain colorscheme
Plug 'junegunn/goyo.vim', { 'on': 'Goyo' } " Distraction-free, screen-centred writing
Plug 'preservim/vim-pencil'      " Improve vim for prose/text writing
Plug 'editorconfig/editorconfig-vim' " support editorconfig files
Plug 'wsdjeg/vim-fetch'         " Handle filename.cpp:132:5 to go to line 132
Plug 'Vimjas/vim-python-pep8-indent' " Just what it sounds like
Plug 'rhysd/vim-clang-format'   " clang-format C/C++ code (:ClangFormat)
Plug 'https://gitlab.com/HiPhish/info.vim.git' " Read infodocs in vim
Plug 'Boolean263/sectional-couch.vim' " My section navigation plugin
Plug 'Boolean263/vim-filetype-debsymbols' " Debian symbols files
Plug 'godlygeek/tabular', { 'on': ['Tabularize', 'Tab'] } " Line up text based on a regexp
Plug 'jlanzarotta/bufexplorer'  " Improved buffer explorer
Plug 'rust-lang/rust.vim'       " Rust programming language support
Plug 'kana/vim-textobj-user'    " User-defined text objects, prereq for next plugin
Plug 'preservim/vim-textobj-sentence' " Enhance vim's idea of what a sentence is
if executable('nope-node')
    Plug 'neoclide/coc.nvim'    " Big completion engine
else
    "Plug 'vim-syntastic/syntastic'  " Syntax checking/linting on file save
    Plug 'dense-analysis/ale'       " Asynchronous Linting Engine
    if has('python3')
        Plug 'SirVer/ultisnips'     " Code snippets (fails horribly if no python3)
        Plug 'pgilad/vim-skeletons' " file skeletons using ultisnips
    endif
endif
if has('python3')
    Plug 'psf/black', { 'tag': 'stable', 'for': 'python' } " Python code formatting
endif
if executable('i3')
    Plug 'mboughaba/i3config.vim'
endif
Plug 'Boolean263/vim-syntax-libconfig'
call plug#end() " }}}2
" }}}1

let g:xml_syntax_folding=1      " see :help xml-folding
let g:c_no_comment_fold=1

" GENERAL SETTINGS {{{1

set modeline                        " allow modelines to work
set backspace=indent,eol,start      " backspace across lines, etc.
set expandtab                       " expand tabs to spaces
set softtabstop=-1                  " soft tab stops match shiftwidth
set shiftround                      " force <</>> to always align to shiftwidth
set noincsearch                     " disable incremental search
set hlsearch                        " hilight search terms
set showcmd                         " show current pending command in last line

set scrolloff=4                     " number of lines to keep visible at top/bottom of screen

set updatetime=250                  " save swap and update CursorHold
set autoread                        " automatically reload the file if it's changed outside of vim and not inside

set display=lastline                " don't show partial lines as @'s
set lazyredraw                      " don't redraw screen during macro execution

if version > 742
    set signcolumn=yes              " always show sign column
else
    let g:gitgutter_sign_column_always=1
endif

" My default seems to be croql; 'help fo-table' says the default is tcq
set formatoptions=                  " clear it out
set formatoptions+=t                " auto-wrap text on textwidth
set formatoptions+=c                " auto-wrap comments on textwidth
set formatoptions+=r                " auto-insert comment leader for Enter
set formatoptions+=o                " auto-insert comment leader for o/O
set formatoptions+=j                " remove comment leader when joining
set formatoptions+=q                " let 'gq' format comments

" https://vimways.org/2018/formatting-lists-with-vim/
if 0 " disabled because I never really use it, if it even works
    set formatoptions+=n                " format 'numbered' lists based on formatlistpat
    set formatlistpat=^\\s*                 " Optional leading whitespace
    set formatlistpat+=[                    " Start character class
    set formatlistpat+=\\[({]\\?            " |  Optionally match opening punctuation
    set formatlistpat+=\\(                  " |  Start group
    set formatlistpat+=[0-9]\\+             " |  |  Numbers
    set formatlistpat+=\\\|                 " |  |  or
    set formatlistpat+=[a-zA-Z]\\+          " |  |  Letters
    set formatlistpat+=\\)                  " |  End group
    set formatlistpat+=[\\]:.)}             " |  Closing punctuation
    set formatlistpat+=]                    " End character class
    set formatlistpat+=\\s\\+               " One or more spaces
    set formatlistpat+=\\\|                 " or
    set formatlistpat+=^\\s*[-–+o*•]\\s\\+  " Bullet points
endif

" Use histogram-based diffs where possible
if has('nvim-0.3.2') || has("patch-8.1.0360")
    set diffopt=filler,internal,algorithm:histogram,indent-heuristic
endif

" Set the directory for saving swap files and undo history
set directory=$TEMP/daperry/vim//
execute "set undodir=" . &directory
set undofile
silent! call mkdir(&directory, "p", 0700)

" Highlight the current line and column, and column after textwidth
" The colours for these are set below
set nocursorline nocursorcolumn colorcolumn=+1
"augroup cursorcoords
"    autocmd!
"    autocmd WinLeave * set nocursorline nocursorcolumn
"    autocmd WinEnter * set cursorline cursorcolumn
"augroup END

"set number
"set relativenumber
"set numberwidth=2

" Show non-printable pseudocharacters
set list
" Fallback symbols if vim has trouble with UTF-8
set listchars=tab:>-,trail:-,extends:>,precedes:<
" The real symbols I want
silent! set listchars=tab:␉·,trail:·,extends:⏵,precedes:⏴,nbsp:␣

silent! set fillchars=vert:│,fold:‧,foldsep:┆,diff:\ ,foldopen:┬,foldclose:═

set linebreak           " When wrapping lines, break them at 'breakat' instead of anywhere
set showbreak=▷         " Show an indicator on soft-wrapped lines
set breakindent         " indent wrapped lines to the same level as the base line

" for :grep
if executable('rg')
    set grepprg=rg\ --vimgrep
endif
cabbrev rg silent grep!

" Command-line tab-completion enhancements
set wildmenu                " Show an auto-completion menu ←/→ changes choice (but see keybindings)
set wildmode=longest:full   " When tab is pressed, fill longest, then show menu

" Matched pairs
set matchpairs+=‘:’,“:”,«:»

" }}}1

" KEY MAPPINGS {{{1

nnoremap <Leader>/ :noh<CR>
nnoremap <Leader>c /^\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>

" Set current working directory to the directory holding the current file
nnoremap <Leader>d :cd %:p:h<CR>:pwd<CR>
" Show current working directory
nnoremap <Leader>p :pwd<CR>

" Why don't these first three work? Bug in clever-f perhaps
"noremap <Leader>f <Plug>(clever-f-reset)
"noremap <Space>f <Plug>(clever-f-reset)
"noremap <Leader>f jk
"noremap <Space>f jk

set pastetoggle=<F9>                " key that toggles paste mode

" Since most of us have Ctrl-S hardwired into our brains
nnoremap <C-S> :wa<CR>
inoremap <C-S> <C-O>:wa<CR>

" Set Ctrl-Backspace to delete word (gui)
inoremap <C-BS> <C-W>
cnoremap <C-BS> <C-W>

" Set Ctrl-Backspace to delete word (tui)
inoremap <C-H> <C-W>
cnoremap <C-H> <C-W>

" Allow Ctrl-W to be something else
inoremap <C-W> <Nop>
cnoremap <C-W> <Nop>

" Make n/N searching always search forward/backward respectively
noremap <expr>n 'Nn'[v:searchforward]
noremap <expr>N 'nN'[v:searchforward]

" Use Shift-Insert to paste the clipboard at the current location
inoremap <S-Insert> <C-O>:set paste<CR><C-R>*<C-O>:set nopaste<CR>
cnoremap <S-Insert> <C-R>*

" Don't let 'x' wipe out the delete register
noremap x "_x

" Move through visual lines rather than physical lines
noremap j gj
noremap k gk
noremap 0 g0
noremap $ g$

" Vi treats 'Y' like 'yy' ;
" this is more consistent with 'C'/'D'
noremap Y y$

" Some nice tweaks to working with visual mode
" `gv` re-selects the last selection
vmap < <gv
vmap > >gv

" pairing with gv, reselect pasted text
nnoremap gp `[v`]

" (open and) focus the quickfix window
nnoremap <Leader>q :copen<CR>

" (open and) focus the location window
nnoremap <Leader>l :lopen<CR>

" :help changelist
nnoremap ]c g,
nnoremap [c g;

nnoremap ]e :ALENext<cr>
nnoremap [e :ALEPrevious<cr>

" Use ↑/↓ in the wildmenu (see above)
" Source: https://vi.stackexchange.com/a/22628/9661
set wildcharm=<C-Z>
cnoremap <expr> <up> wildmenumode() ? "\<left>" : "\<up>"
cnoremap <expr> <down> wildmenumode() ? "\<right>" : "\<down>"
cnoremap <expr> <left> wildmenumode() ? "\<up>" : "\<left>"
cnoremap <expr> <right> wildmenumode() ? " \<bs>\<C-Z>" : "\<right>"

" }}}1

" Folding management {{{1
set foldcolumn=2                    " Show a 2-char wide fold column at the left
set foldlevelstart=0                " And close all folds upon loading a file
set foldmethod=marker               " Default folding method

" Better fold messages, from
" https://www.reddit.com/r/vim/comments/fwjpi4/here_is_how_to_retain_indent_level_on_folds/
function! NeatFoldText()
    let indent_level = indent(v:foldstart)
    let indent = repeat(' ',indent_level)
    let line = ' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{' . '{\d*\s*', '', 'g') . ' '
    let lines_count = v:foldend - v:foldstart + 1
    let lines_count_text = printf("%10s", lines_count . ' lines') . ' '
    let foldchar = matchstr(&fillchars, 'fold:\zs.')
    let foldtextstart = strpart(repeat(foldchar, v:foldlevel*2) . line, 0, (winwidth(0)*2)/3)
    let foldtextend = lines_count_text . repeat(foldchar, 8)
    let foldtextlength = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
    return indent . foldtextstart . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
endfunction
set foldtext=NeatFoldText()

" Better fold navigation, from
" https://vim.fandom.com/wiki/Navigate_to_the_next_open_fold
function! GoToOpenFold(direction)
    if (a:direction == "next")
        normal zj
        let start = line('.')
        while foldclosed(start) != -1
            let start = start + 1
        endwhile
    else
        normal zk
        let start = line('.')
        while foldclosed(start) != -1
            let start = start - 1
        endwhile
    endif
    call cursor(start, 0)
endfunction
"noremap <silent> ]z :call GoToOpenFold("next")<CR>
"noremap <silent> [z :call GoToOpenFold("prev")<CR>
noremap ]z zj
noremap [z zk
" }}}1

" Buffer management {{{1
set hidden " lets you switch away from unsaved buffers

" List buffers and let you choose one
" Vanilla method:
"nnoremap <leader>b :ls<cr>:b<space>

" Plugin method:
nnoremap <leader>b :BufExplorer<CR>

" }}}1

" I forget what this does so I'm commenting it out.
" Maybe re-add and comment in after/ftplugin/qf.vim
" augroup quickfix
"     autocmd!
"     autocmd QuickFixCmdPost [^l]* cwindow
" augroup END

" auto-complete options; see :help ins-completion {{{1
" see also https://vimways.org/2018/you-should-be-using-tags-in-vim/
" see also https://vim.wikia.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE
set complete=.,t,i
set completeopt=menuone,preview
" autocomplete from tag
inoremap <C-]> <C-X><C-]>
" autocomplete from keywords in the current and included files
inoremap <C-N> <C-X><C-I>
" autocomplete from definitions/macros
inoremap <C-D> <C-X><C-D>

" For COC and the like {{{2
set shortmess+=c

" }}}2
" }}}1

" nvim doesn't (yet) support clipboard=autoselect
" https://github.com/neovim/neovim/wiki/FAQ#copying-to-x11-primary-selection-with-the-mouse-doesnt-work
if has('nvim') && &clipboard !~ '\<autoselect'
    vnoremap <LeftRelease> "*ygv
endif
